component provides App requires io.Output out, data.StringUtil stringUtil, net.http.HTTPRequest rq, data.IntUtil intUtl,io.File,data.query.Search search,os.Run run,data.json.JSONParser parser {
 
 
	
	int App:main(AppParam params[])
	{
		inspect_container("localhost",get_cntnr_id("D:\\MSCI\\Fyp_masters\\Fyp_code\\FYP_Masters\\Docker_dana_server\\ids_res.txt"))
		get_status("D:\\MSCI\\Fyp_masters\\Fyp_code\\FYP_Masters\\Docker_dana_server\\status_res.txt")
		return 0
	}
	
	void inspect_container(char ip[],String ids[])
	{	int cntr=0
		char log_path[]="D:\\MSCI\\Fyp_masters\\Fyp_code\\FYP_Masters\\Docker_dana_server\\inspect_res.txt"
		while (cntr < ids.arrayLength)// ids[cntr]!=null)
		{
			if (ids[cntr]==null){
			}
			else{
				char id[]=ids[cntr].string
				char path[]="D:\\MSCI\\Fyp_masters\\Fyp_code\\FYP_Masters\\Docker_dana_server\\d_inspect $id"
				RunStatus s = run.execute(path)
				char gtwy[]=extract_info_on_container(log_path,"Gateway")
				
				char c_ip[]  = extract_info_on_container(log_path,"IPAddress")
				
				out.println("Gateway is: $gtwy")
				
				out.println("Ip address is: $c_ip")
				
				out.println("The container id is: $id")
			}
			cntr++
		}
		
	
		
	
	}
	
		void get_status(char f_n[])
	{
		RunStatus s = run.execute("D:\\MSCI\\Fyp_masters\\Fyp_code\\FYP_Masters\\Docker_dana_server\\live_container_info")
						
		char res[] = read_file(f_n)
		
		out.println("Status result is: $res")
		
	
	}
	
	
	String[] get_cntnr_id(char f_n[])
	{
		RunStatus s = run.execute("D:\\MSCI\\Fyp_masters\\Fyp_code\\FYP_Masters\\Docker_dana_server\\get_ids")
						
		char res[] = read_file(f_n)
		String cntnr_id[]
		
		cntnr_id = stringUtil.explode(res, "\n\r")
		
		//out.println(cntnr_id[0].string)
		
		return cntnr_id
	
	}
	
	
	char[] extract_info_on_container(char f_n[],char info[])
	{
		char rest[]
		char infrm[]
		
		char jsonArray[] = new char[]("{ \"array\":", read_file(f_n), "}")
		//out.println(jsonArray)
		JSONElement doc = parser.parseDocument(jsonArray)
		
		JSONElement cellA = parser.getValue(doc, "array").children[0]
	
		JSONElement leaf = parser.getValue(cellA, "NetworkSettings")
		
		leaf = parser.getValue(leaf, "Networks")
		
		leaf = parser.getValue(leaf, "docker_dana_server_default")
		
		infrm = parser.getValue(leaf, info).value
		
		return infrm
	
	}
	
	
	
	
	char[] read_file(char f_name[])
	{
		File f = new File(f_name, File.FILE_ACCESS_READ)

		char q[] = f.read(f.getSize())
		
		return q
		
	}
}