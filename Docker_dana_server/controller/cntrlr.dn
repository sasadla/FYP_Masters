uses time.DateTime
uses ws.forms.FileFormField
component provides App requires io.Output out,io.FileSystem fileSystem, data.StringUtil stringUtil,data.IntUtil intUtl,io.File, os.Run run,net.http.HTTPRequest rq, data.DecUtil decUtil, util.Math maths{
 
	//moderate load and fails state global declarations
	int fail_state_adjusted= 8999
	int moderate_load_adjusted = 4999
	
	//avg_ttr_k_nearest_values
	int free_trained_avg 
	int busy_trained_avg 
	int overloaded_trained_avg 
	
	//min_avg_ttr_k_nearest_values
	int free_trained_min_avg 
	int busy_trained_min_avg 
	int overloaded_trained_min_avg
	
	//cntrlr running variables
	bool times = true
	
	int App:main(AppParam params[])
	{	
		char f_name[] = "reg_stats.txt"
		
		//RunStatus s = run.execute("dana ws.core_mod &")
		if (fileSystem.exists(f_name))
		{
			RunStatus st = run.execute("DEL $f_name")
		}
		
		//min_avg busy above 5899 ,overloades above 10752
		//avg busy above 4576 ,overloades above 11363
		
		do_knn_calculations()
		
		while(times)
		{
			run_cntrlr()
			
		}
		
	//	out.println("Moderate load new:$(intUtl.intToString(moderate_load_adjusted))")
	//	out.println("fails state new:$(intUtl.intToString(fail_state_adjusted))")
		return 0
	}
	
	
	void run_cntrlr()
	{
	
		String ips_to_check[] = stringUtil.explode(read_file("ips_to_check.txt"), "\n\r")
		char log_name[] ="controller_table_log.txt"
		char av_host[]
		int skip 
		char avg_ttr_w_srvc[]
		char min_avg_ttr_w_srvc[]
		int tCount
		int prt = 2018
		char log_name_ml[] ="ml_log.txt"
		
		
		
		bool test_run = true
		bool free_found = false
		bool free_done = false
		bool busy_found = false
		bool busy_done = false
		bool ovrldd_found = false
		bool ovrldd_done = false
		
		for(int i=0;i<ips_to_check.arrayLength;i++)
		{
			HTTPResponse r
		
		
			char log[]
			
			r = rq.get("http://$(ips_to_check[i].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
			
			char dd[] = r.content
			out.println("ddf: $dd")
			char status[]
			
			if (dd.arrayLength > 0)
			{
				out.println("Container Down on $(ips_to_check[i].string)")
			
			}
			else
			{
				if(i!=skip)
				{
					test_run = true
				}
				
					if(test_run)
					{
						r = rq.get("http://$(ips_to_check[i].string):2018/$log_name", null)/*"http://127.0.0.1:5100"*/	
					}
					out.println(ips_to_check[i].string)
					r = rq.get("http://$(ips_to_check[i].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/	
						log = r.content
						//out.println(log)
						//write_to_file(log_name_ml,log)
						out.println("log: $log")
					tCount = intUtl.intFromString(stringUtil.explode(stringUtil.explode(log,"\n\r")[5].string,":")[1].string)
					
					//out.println(intUtl.intToString(tCount))
					
					avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
					
				//	out.println(avg_ttr_w_srvc)
					
					min_avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string
					
				//	out.println(min_avg_ttr_w_srvc)
				
					bool ad
					if(!test_run)
					{
						ad = false
					}
					else
					{
						ad = true
					}
					
					status = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc),ad)
				//	out.println("$(log)Status is:$status")
					write_to_file(log_name_ml,">$(log)Status is:$status")
					
					if (free_found){
						if(i!=skip)
						{
							for(int x=0;x<ips_to_check.arrayLength;x++)
							{
								
								r = rq.get("http://$(ips_to_check[x].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
								dd = r.content
								
								r = rq.get("http://$(ips_to_check[x].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/	
								
								log = r.content
								
								if (dd.arrayLength > 0 && x!=skip)
								{
									out.println("Container Not Active On: $(ips_to_check[x].string)")
								//
								}
								else
								{
									avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
						
									min_avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string

									status = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc),false)
									
									char f_st[] = status 
									
									if(f_st == "FREE" && f_st != "BUSY" && f_st != "OVERLOADED" && (!busy_found || !ovrldd_found) && x!=skip)
									{
										out.println("FREE Active")
										r = rq.get("http://$(ips_to_check[x].string):2018/down", null)/*"http://127.0.0.1:5100"*/	
										log = r.content
										out.println(log)
									}
								
								
								}
							}

						}
						
						if(i>=ips_to_check.arrayLength-1)
						{
							free_done = true
							test_run = false
						}
						
					}
					
					if(busy_found)
					{
						r = rq.get("http://$(ips_to_check[i].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
						
						dd = r.content
						
						if(i!=skip)
						{
							if (dd.arrayLength > 0)
							{
								out.println("BUSY ACTIVE")
								r = rq.get("http://$(ips_to_check[i].string):2018/up", null)/*"http://127.0.0.1:5100"*/	
								log = r.content
								out.println(log)
								busy_found = false
								test_run = false
							}
							else
							{
								out.println("BUSY ACTIVE ELSE")
							}
						}
						busy_done = true

					}
					
					if(ovrldd_found)
					{
						
						r = rq.get("http://$(ips_to_check[i].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
						
						dd = r.content
						
						if(i!=skip)
						{
							if (dd.arrayLength > 0)
							{
								out.println("OVERLOADED ACTIVE")
								r = rq.get("http://$(ips_to_check[i].string):2018/up", null)/*"http://127.0.0.1:5100"*/	
								log = r.content
								out.println(log)
								if(i >= ips_to_check.arrayLength)
								{
									ovrldd_found = false
								}
								
								test_run = false

							}
							else
							{
								out.println("OVERLOADED ACTIVE ELSE")
							}
						}
						ovrldd_done = true
					
					}
					
					if(status == "FREE" && !free_done)
					{
						free_found = true
						skip = i
						r = rq.get("http://$(ips_to_check[i].string):2018/WT_controller_table_log.txt", null)/*"http://127.0.0.1:5100"*/	
						log = r.content
						//out.println(log)
						av_host =stringUtil.explode(stringUtil.explode(log,"\n\r")[0].string,":")[1].string
						
						char f_ip[] = stringUtil.explode(read_file("free_ips.txt"),"\n\r")[0].string

						if(!(f_ip == ips_to_check[i].string))
						{
							RunStatus s = run.execute("./clear_file.bash free_ips.txt")
							write_to_file("free_ips.txt","$av_host.lancs.ac.uk")
						}
						test_run = false
						//i = 0
						//i--
						out.println("FREE: All is well, Pull down all replicas but current one")
						
					}
					else if(status == "BUSY" && !busy_done)
					{
						busy_found = true
						skip = i
						i = 0
						i--
						test_run = false
						out.println("BUSY:Launch one new instance to share the load")
						
					}
					
					else if(status == "OVERLOADED" && !ovrldd_done)
					{	
						ovrldd_found = true
						skip = i
						i = 0
						i--
						test_run = false
						out.println("OVERLOADED:Launch two new instance to share the load and stablize")
					}
					
				
			}
		}
		//out.println("file is$(read_file(log_name_ml))")
	
	
	}
	
	
	char[] get_stat(int avg, int min_avg,bool add){
		
		/*int dif = avg - min_avg
		char stat[]
		char f_nme[] = "reg_stats.txt"
		
		if(avg>= fail_state_adjusted || min_avg>= fail_state_adjusted){
			stat = "OVERLOADED"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(2))
			}
		}
		else if((avg >= min_avg || avg <= min_avg) && (avg >= moderate_load_adjusted || (avg<=min_avg && min_avg >= moderate_load_adjusted)) && (avg <= fail_state_adjusted || (avg<=min_avg && min_avg <= fail_state_adjusted))){
			stat ="BUSY"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(1))
			}
		}
		else if (avg <= min_avg && min_avg < moderate_load_adjusted){
			stat= "FREE"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(0))
			}
		}
		else if (avg >= min_avg && avg < moderate_load_adjusted){
			stat= "FREE"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(0))
			}
		}*/
		
		dec free_avg_calc = 0.0
		dec busy_avg_calc = 0.0
		dec overloaded_avg_calc = 0.0
		dec x = 0.0
		dec y = 0.0
		char f_nme[] = "reg_stats.txt"
		char stat[] = "unknown"
		//distance calclation formulae sqrt(x2-x1)2 + (y2-y1)2
		
		x = decUtil.decFromString("$(intUtl.intToString(free_trained_avg)).0") - decUtil.decFromString("$(intUtl.intToString(avg)).0")
		
		y = decUtil.decFromString("$(intUtl.intToString(free_trained_min_avg)).0") - decUtil.decFromString("$(intUtl.intToString(min_avg)).0")
		
		free_avg_calc = maths.power((x), 2.00) + maths.power((y), 2.00)
		free_avg_calc = maths.sqrt(free_avg_calc)
		
		x = decUtil.decFromString("$(intUtl.intToString(busy_trained_avg)).0") - decUtil.decFromString("$(intUtl.intToString(avg)).0")
		
		y = decUtil.decFromString("$(intUtl.intToString(busy_trained_min_avg)).0") - decUtil.decFromString("$(intUtl.intToString(min_avg)).0")
		
		busy_avg_calc = maths.power((x), 2.00) + maths.power((y), 2.00)
		busy_avg_calc = maths.sqrt(busy_avg_calc)
		
		x = decUtil.decFromString("$(intUtl.intToString(overloaded_trained_avg)).0") - decUtil.decFromString("$(intUtl.intToString(avg)).0")
		
		y = decUtil.decFromString("$(intUtl.intToString(overloaded_trained_min_avg)).0") - decUtil.decFromString("$(intUtl.intToString(min_avg)).0")
		
		overloaded_avg_calc = maths.power((x), 2.00) + maths.power((y), 2.00)
		overloaded_avg_calc = maths.sqrt(overloaded_avg_calc)
		
		if(busy_avg_calc >= free_avg_calc && free_avg_calc <= overloaded_avg_calc)
		{
			stat = "FREE"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(0))
			}
		}
		else if(busy_avg_calc <= overloaded_avg_calc && free_avg_calc >= busy_avg_calc)
		{
			stat = "BUSY"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(1))
			}
		}
		else if(busy_avg_calc >= overloaded_avg_calc && free_avg_calc >= overloaded_avg_calc)
		{
			stat = "OVERLOADED"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(2))
			}
		}
		
		
		
		
		//regression check starts here
		
		char st_c[] = read_file(f_nme)
		
		String sts[] =stringUtil.explode(st_c,"\n\r")
		out.println("arraysize:$(intUtl.intToString(sts.arrayLength))")
		
		if(sts.arrayLength >= 15)
		{
			do_regression(sts,f_nme)
		}
		
		
		return stat
	
	}
						
	
	void do_regression(String sts[],char f_nme[])
	{//regression code starts here
		
		int fail_state= 9999
		int moderate_load = 5999
		dec st_free = 0.0
		dec st_busy = 0.0
		dec st_ovrld = 0.0
		dec stat_free = 0.0
		dec stat_busy = 0.0
		dec stat_ovrld = 0.0
		
		for(int i = 0;i < sts.arrayLength;i++)
				{
				//	out.println("index:$(intUtl.intToString(i))")
				//	out.println(sts[i].string)
				
					if(sts[i].string=="0")
					{
						st_free = st_free+1
					}
					else if(sts[i].string=="1")
					{
						st_busy = st_busy+1
					}
					else if(sts[i].string=="2")
					{
						st_ovrld = st_ovrld+1
					}
				}
				
				stat_free = st_free/sts.arrayLength
				stat_busy = st_busy/sts.arrayLength
				stat_ovrld = st_ovrld/sts.arrayLength
				
				//out.println("$(decUtil.decToString(st_free))==>$(decUtil.decToString(stat_free)),$(decUtil.decToString(st_busy))==>$(decUtil.decToString(stat_busy)),$(decUtil.decToString(st_ovrld))==>$(decUtil.decToString(stat_ovrld))")
				
				RunStatus s = run.execute("DEL $f_nme")
				
				if(stat_free >= 0.6)
				{	
					dec ml_dec = (0.1*moderate_load_adjusted) + moderate_load_adjusted
					dec fl_dec = (0.1*fail_state_adjusted)  + fail_state_adjusted
					int ml_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_dec),".")[0].string)
					int fl_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_dec),".")[0].string)
					
					
					//out.println("ml_adjust:$(intUtl.intToString(ml_adjust))")
					//out.println("fl_adjust:$(intUtl.intToString(fl_adjust))")
					
					if(ml_adjust<=moderate_load)
					{
						moderate_load_adjusted = ml_adjust
					}
					else
					{
						moderate_load_adjusted = moderate_load
					}
					if(fl_adjust<=fail_state)
					{
						fail_state_adjusted = fl_adjust
					}
					else
					{
						fail_state_adjusted = fail_state
					}
					out.println("Free found greater than or equals to 60% of the time with value:$(decUtil.decToString(stat_free))")
					
				}
				else if(stat_busy >= 0.6)
				{
					
					
					dec ml_dec = 0.9*moderate_load_adjusted
					dec fl_dec = 0.9*fail_state_adjusted
					int ml_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_dec),".")[0].string)
					int fl_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_dec),".")[0].string)
					
					
					dec ml_half = moderate_load/2
					dec fl_half = fail_state/2
					
					int ml_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_half),".")[0].string)
					
					int fl_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_half),".")[0].string)
					
					//out.println("ml_adjust:$(intUtl.intToString(ml_adjust))")
					//out.println("fl_adjust:$(intUtl.intToString(fl_adjust))")
				
					if(ml_adjust>=(moderate_load/2))
					{
						moderate_load_adjusted = ml_adjust
					}
					else
					{
						moderate_load_adjusted = ml_half_set
					}
					if(fl_adjust>=(fail_state/2))
					{
						fail_state_adjusted = fl_adjust
					}
					else
					{
						fail_state_adjusted = fl_half_set
					}
					
					out.println("Busy found greater than or equals to 60% of the time with value:$(decUtil.decToString(stat_busy))")
				}
				else if(stat_ovrld >= 0.6)
				{
					
					dec ml_dec = 0.8*moderate_load_adjusted
					dec fl_dec = 0.8*fail_state_adjusted
					int ml_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_dec),".")[0].string)
					int fl_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_dec),".")[0].string)
					
					
					dec ml_half = moderate_load/2
					dec fl_half = fail_state/2
					
					int ml_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_half),".")[0].string)
					
					int fl_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_half),".")[0].string)
					
					//out.println("ml_adjust:$(intUtl.intToString(ml_adjust))")
					//out.println("fl_adjust:$(intUtl.intToString(fl_adjust))")
					
					if(ml_adjust>=(moderate_load/2))
					{
						moderate_load_adjusted = ml_adjust
					}
					else
					{
						moderate_load_adjusted = ml_half_set
					}
					if(fl_adjust>=(fail_state/2))
					{
						fail_state_adjusted = fl_adjust
					}
					else
					{
						fail_state_adjusted = fl_half_set
					}
					
					
					out.println("Overloaded found greater than or equals to 60% of the time with value:$(decUtil.decToString(stat_ovrld))")
				}
		out.println("Moderate load new:$(intUtl.intToString(moderate_load_adjusted))")
		out.println("fails state new:$(intUtl.intToString(fail_state_adjusted))")
	
	}
	
	
	void do_knn_calculations()
	{
		//intUtl.intFromString(stringUtil.explode(stringUtil.explode(log,"\n\r")[5].string,":")[1].string)
		
		char f_name[] = "knn_trained_vals"
		
		if (fileSystem.exists(f_name))
		{
			out.println("\n---TRAINING ALREADY DONE---")
			String fls[] = stringUtil.explode(read_file("knn_trained_vals"),"\n\r")
			free_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[0].string)
			free_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[0].string)
			
			busy_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[1].string)
			busy_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[1].string)
			
			overloaded_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[2].string)
			overloaded_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[2].string)
			
		}
		else
		{
			do_knn_training()
		}
		
		out.println("")
		out.println("AVG_TTR Trained values")
		out.println("FOR FREE:$(intUtl.intToString(free_trained_avg))")
		out.println("FOR BUSY:$(intUtl.intToString(busy_trained_avg))")
		out.println("FOR OVERLOADED:$(intUtl.intToString(overloaded_trained_avg))")
		out.println("\nMIN_AVG_TTR Trained values")
		out.println("FOR FREE:$(intUtl.intToString(free_trained_min_avg))")
		out.println("FOR BUSY:$(intUtl.intToString(busy_trained_min_avg))")
		out.println("FOR OVERLOADED:$(intUtl.intToString(overloaded_trained_min_avg))")
		
		
	//	char fl[] = read_file("knn_trained_vals") 
	//	out.println("\n\nfile is:\n $(fl)")
	
	}

	
	
	
	void do_knn_training()
	{
	
		//avg_ttr_k_nearest_values
		dec free_trained_avg_temp = 0
		dec busy_trained_avg_temp = 0
		dec overloaded_trained_avg_temp = 0 
	
		//min_avg_ttr_k_nearest_values
		dec free_trained_min_avg_temp = 0
		dec busy_trained_min_avg_temp = 0
		dec overloaded_trained_min_avg_temp = 0
		
		//avg counters
	
		dec free_count = 0
		dec busy_count = 0
		dec overloaded_count = 0

		
		
		char fl_data[] = read_file("ml_log_csv.csv")
		String ext_data[] = stringUtil.explode(fl_data,"\n\r")
		out.println("---KNN_TRAINING RUNNING---\n\n")
		for(int i = 0; i< ext_data.arrayLength;i++)
		{
			if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="FREE")
			{
				free_trained_avg_temp = free_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				free_trained_min_avg_temp = free_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string) 
				free_count = free_count + 1
			}
			else if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="BUSY")
			{
				
				busy_trained_avg_temp = busy_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				busy_trained_min_avg_temp = busy_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string)
				
				busy_count = busy_count + 1
			}
			else if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="OVERLOADED")
			{
				overloaded_trained_avg_temp = overloaded_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				overloaded_trained_min_avg_temp = overloaded_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string)	
				overloaded_count = overloaded_count + 1
				
			}
			
			out.print("-")
		}
		
		free_trained_avg_temp = free_trained_avg_temp / free_count
		free_trained_min_avg_temp = free_trained_min_avg_temp / free_count
		busy_trained_avg_temp = busy_trained_avg_temp / busy_count
		busy_trained_min_avg_temp = busy_trained_min_avg_temp / busy_count
		overloaded_trained_avg_temp = overloaded_trained_avg_temp / overloaded_count
		overloaded_trained_min_avg_temp = overloaded_trained_min_avg_temp / overloaded_count
		
		free_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_avg_temp),".")[0].string)
		
		free_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_min_avg_temp),".")[0].string)
		
		busy_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_avg_temp),".")[0].string)
		
		busy_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_min_avg_temp),".")[0].string)
		
		overloaded_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_avg_temp),".")[0].string)
		
		overloaded_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_min_avg_temp),".")[0].string)
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_avg_temp),".")[1].string[0])>=5)
		{
			free_trained_avg = free_trained_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			free_trained_min_avg = free_trained_min_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_avg_temp),".")[1].string[0])>=5)
		{
			busy_trained_avg = busy_trained_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			busy_trained_min_avg = busy_trained_min_avg + 1
		}
		
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_avg_temp),".")[1].string[0])>=5)
		{
			overloaded_trained_avg = overloaded_trained_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			overloaded_trained_min_avg = overloaded_trained_min_avg + 1
		}
	
	
		char avg_vals[]="$(intUtl.intToString(free_trained_avg)),$(intUtl.intToString(busy_trained_avg)),$(intUtl.intToString(overloaded_trained_avg)),"
		
		char min_avg_vals[]="$(intUtl.intToString(free_trained_min_avg)),$(intUtl.intToString(busy_trained_min_avg)),$(intUtl.intToString(overloaded_trained_min_avg)),"
			
		write_to_file("knn_trained_vals",avg_vals)
		write_to_file("knn_trained_vals",min_avg_vals)
	}

	
	
	
	
	
	void write_to_file(char f_n[],char d[])
	{	
		File f = new File(f_n, File.FILE_ACCESS_WRITE)
		f.setPos(f.getSize())
		f.write("$d\n")
		f.close()
	}
	
	char[] read_file(char f_name[])
	{
		if (fileSystem.exists(f_name))
		{
			File f = new File(f_name, File.FILE_ACCESS_READ)
			char q[] = f.read(f.getSize())
			f.close()
			return q
		}
		return null
		
	}
	
	
}