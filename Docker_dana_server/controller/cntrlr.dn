uses time.DateTime
uses ws.forms.FileFormField
component provides App requires io.Output out, data.StringUtil stringUtil,data.IntUtil intUtl,io.File, os.Run run,net.http.HTTPRequest rq  {
 
 
	
	int App:main(AppParam params[])
	{	
		String ips_to_check[] = stringUtil.explode(read_file("ips_to_check.txt"), "\n\r")
		char log_name[] ="controller_table_log.txt"
		char av_host[]
		int skip 
		char avg_ttr_w_srvc[]
		char min_avg_ttr_w_srvc[]
		int tCount
		int prt = 2018
		char log_name_ml[] ="ml_log.txt"
		
		
		RunStatus s = run.execute("if exist free_ips.txt break> free_ips.txt")
		
		bool test_run = true
		bool free_found = false
		bool free_done = false
		bool busy_found = false
		bool busy_done = false
		bool ovrldd_found = false
		bool ovrldd_done = false
		
		for(int i=0;i<ips_to_check.arrayLength;i++)
		{
			HTTPResponse r
		
		
			char log[]
			
		//	r = rq.get("http://$(ips_to_check[i].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
			
			char dd[]// = r.content
			
			char status[]
			
			//if (dd.arrayLength > 0)
			//{
				//out.println(dd)
			//
			//}
			//else
			//{
				if(test_run)
				{
					r = rq.get("http://$(ips_to_check[i].string):2018/$log_name", null)/*"http://127.0.0.1:5100"*/	
				}
				r = rq.get("http://$(ips_to_check[i].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/	
					log = r.content
					//out.println(log)
					//write_to_file(log_name_ml,log)
					
				tCount = intUtl.intFromString(stringUtil.explode(stringUtil.explode(log,"\n\r")[5].string,":")[1].string)
				
				//out.println(intUtl.intToString(tCount))
				
				avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
				
			//	out.println(avg_ttr_w_srvc)
				
				min_avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string
				
			//	out.println(min_avg_ttr_w_srvc)
				
				status = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc))
				write_to_file(log_name_ml,"$(log)Status is:$status")
				
				if (free_found){
					if(i!=skip)
					{
						for(int x=0;x<ips_to_check.arrayLength;x++)
						{
							
							r = rq.get("http://$(ips_to_check[x].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
							dd = r.content
							
							r = rq.get("http://$(ips_to_check[x].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/	
							
							log = r.content
							
							if (dd.arrayLength > 0 && x!=skip)
							{
								out.println("Container Active On: $(ips_to_check[x].string)")
							//
							}
							else
							{
								avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
					
								min_avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string

								status = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc))
								
								char f_st[] = status 
								
								if(f_st == "FREE" && f_st != "BUSY" && f_st != "OVERLOADED" && (!busy_found || !ovrldd_found) && x!=skip)
								{
									out.println("FREE Active")
									r = rq.get("http://$(ips_to_check[x].string):2018/down", null)/*"http://127.0.0.1:5100"*/	
									log = r.content
									out.println(log)
								}
							
							
							}
						}

					}
					
					if(i>=ips_to_check.arrayLength-1)
					{
						free_done = true
						test_run = false
					}
					
				}
				
				if(busy_found)
				{
					r = rq.get("http://$(ips_to_check[i].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
					
					dd = r.content
					
					if(i!=skip)
					{
						if (dd.arrayLength > 0)
						{
							out.println("BUSY ACTIVE")
							r = rq.get("http://$(ips_to_check[i].string):2018/up", null)/*"http://127.0.0.1:5100"*/	
							log = r.content
							out.println(log)
							busy_found = false
							test_run = false
						}
						else
						{
							out.println("BUSY ACTIVE ELSE")
						}
					}
					busy_done = true

				}
				
				if(ovrldd_found)
				{
					
					r = rq.get("http://$(ips_to_check[i].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
					
					dd = r.content
					
					if(i!=skip)
					{
						if (dd.arrayLength > 0)
						{
							out.println("OVERLOADED ACTIVE")
							r = rq.get("http://$(ips_to_check[i].string):2018/up", null)/*"http://127.0.0.1:5100"*/	
							log = r.content
							out.println(log)
							if(i >= ips_to_check.arrayLength)
							{
								ovrldd_found = false
							}
							
							test_run = false

						}
						else
						{
							out.println("OVERLOADED ACTIVE ELSE")
						}
					}
					ovrldd_done = true
				
				}
				
				if(status == "FREE" && !free_done)
				{
					free_found = true
					skip = i
					r = rq.get("http://$(ips_to_check[i].string):2018/WT_controller_table_log.txt", null)/*"http://127.0.0.1:5100"*/	
					log = r.content
					//out.println(log)
					av_host =stringUtil.explode(stringUtil.explode(log,"\n\r")[0].string,":")[1].string
					write_to_file("free_ips.txt",av_host)
					test_run = false
					//i = 0
					//i--
					out.println("FREE: All is well")
					
				}
				else if(status == "BUSY" && !busy_done)
				{
					busy_found = true
					skip = i
					i = 0
					i--
					test_run = false
					out.println("BUSY:Launch one new instance to share the load")
					
				}
				
				else if(status == "OVERLOADED" && !ovrldd_done)
				{	
					ovrldd_found = true
					skip = i
					i = 0
					i--
					test_run = false
					out.println("OVERLOADED:Launch two new instance to share the load and stablize")
				}
				
				
			//}
		}
		out.println("file is$(read_file(log_name_ml))")
		return 0
	}
	
	
	
	char[] get_stat(int avg, int min_avg){
		int dif = avg - min_avg
		int fail_state= 9999
		int moderate_load = 5999
		char stat[]
		
	//	out.println("ttt$(intUtl.intToString(avg)) - $(intUtl.intToString(min_avg)) = $(intUtl.intToString(dif))")
		
		
		if(avg>= fail_state){
			stat = "OVERLOADED"
		}
		else if(avg > min_avg && dif>min_avg && avg > moderate_load && avg < fail_state){
			stat ="BUSY"
		}
		else if (avg <= min_avg){
			stat= "FREE"	
		}
		else if (avg > min_avg && avg < moderate_load){
			stat= "FREE"	
		}
		
		return stat
	
	}
						
	
	
	
	void write_to_file(char f_n[],char d[])
	{	
		File f = new File(f_n, File.FILE_ACCESS_WRITE)
		f.setPos(f.getSize())
		f.write("$d\n")
		f.close()
	}
	
	char[] read_file(char f_name[])
	{
		File f = new File(f_name, File.FILE_ACCESS_READ)
		char q[] = f.read(f.getSize())
		f.close()
		return q
		
	}
	
	
}