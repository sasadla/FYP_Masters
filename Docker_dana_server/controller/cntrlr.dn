uses time.DateTime
uses ws.forms.FileFormField
component provides App requires io.Output out,io.FileSystem fileSystem, data.StringUtil stringUtil,data.IntUtil intUtl,io.File, os.Run run,net.http.HTTPRequest rq, data.DecUtil decUtil, util.Math maths{
	//global declarations
 
	//moderate load and fails state
	int fail_state_adjusted= 8999
	int moderate_load_adjusted = 4999
	
	//avg_ttr_k_nearest_values
	int free_trained_avg 
	int busy_trained_avg 
	int overloaded_trained_avg 
	
	//min_avg_ttr_k_nearest_values
	int free_trained_min_avg 
	int busy_trained_min_avg 
	int overloaded_trained_min_avg
	
	//cntrlr running variables
	bool times = true
	
	//cntrlr control varibales
	bool test_run = true
	bool free_found = false
	bool free_done = false
	bool busy_found = false
	bool busy_done = false
	bool ovrldd_found = false
	bool ovrldd_done = false
	bool skip_assigned = false
	
	/**
	*main function that runs the controller in an infinite loop
	*
	*
	*inputs:
	*
	*result:
	*controller runs and does appropriate calculations and tasks  
	*/
	
	int App:main(AppParam params[])
	{	
		char f_name[] = "reg_stats.txt"
		
		if (fileSystem.exists(f_name))
		{
			RunStatus st = run.execute("DEL $f_name")
		}
		
		//min_avg busy above 5899 ,overloades above 10752
		//avg busy above 4576 ,overloades above 11363
		
		do_knn_calculations()
		
		while(times)
		{
			run_cntrlr()
			
		}
		
		return 0
	}
	
	/**
	*this function is the main loop that scans all the network i.e checks to see if the given machines (declared in ips_to_check.txt file in the same directory) are powered up or down if they are down they are skipped if they are up then tier status is checked and appropriate load balancing option is taken
	*
	*
	*inputs:
	*
	*result:
	*take appropriate load balancing action  
	*/
	
	void run_cntrlr()
	{
	
		String ips_to_check[] = stringUtil.explode(read_file("ips_to_check.txt"), "\n\r")
		char log_name[] ="controller_table_log.txt"
		char av_host[] 
		char avg_ttr_w_srvc[]
		char min_avg_ttr_w_srvc[]
		int tCount
		int prt = 2018
		char log_name_ml[] ="ml_log.txt"
		int skip
		bool ad
		
		for(int i=0;i<ips_to_check.arrayLength;i++)
		{
			HTTPResponse r
		
		
			char log[]
			
			r = rq.get("http://$(ips_to_check[i].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
			
			char dd[] = r.content
			out.println("ddf: $dd")
			char status[]
			
			if (dd.arrayLength > 0)
			{
				out.println("Container Down on $(ips_to_check[i].string)")
			
			}
			else
			{
			
				if(test_run)
				{
					r = rq.get("http://$(ips_to_check[i].string):2018/$log_name", null)/*"http://127.0.0.1:5100"*/	
				}
				else
				{
					r = rq.get("http://$(ips_to_check[i].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/
				}
				out.println(ips_to_check[i].string)
					
						
						
				log = r.content
					
				if (!(log == "Webservice down Cannot run test") || !(log.arrayLength > 0))
				{	
					out.println("log: $log")
					tCount = intUtl.intFromString(stringUtil.explode(stringUtil.explode(log,"\n\r")[5].string,":")[1].string)
						
					//out.println(intUtl.intToString(tCount))
						
					avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
						
						
					min_avg_ttr_w_srvc = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string
						
				}
								
				if(!test_run)
				{
					ad = false
				}
				else
				{
					ad = true
				}
					
				status = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc),ad)
				write_to_file(log_name_ml,">$(log)Status is:$status")
										
				if(status == "FREE" && !free_done)
				{
					free_found = true
					if(!skip_assigned)
					{
						skip = i
						skip_assigned = true
					}
					r = rq.get("http://$(ips_to_check[i].string):2018/WT_controller_table_log.txt", null)/*"http://127.0.0.1:5100"*/	
					log = r.content
					
					av_host =stringUtil.explode(stringUtil.explode(log,"\n\r")[0].string,":")[1].string
						
					char f_ip[] = stringUtil.explode(read_file("free_ips.txt"),"\n\r")[0].string

					if(!(f_ip == ips_to_check[i].string))
					{
						//RunStatus s = run.execute("./clear_file.bash free_ips.txt")
						RunStatus s = run.execute("DEL free_ips.txt")
						write_to_file("free_ips.txt","$av_host.lancs.ac.uk")
					}
					test_run = false
					out.println("FREE: All is well, Pull down all replicas but current one")
					free_found(i, skip,ips_to_check,dd,r,log,log_name)
											
				}
				else if(status == "BUSY" && !busy_done)
				{
					busy_found = true
					if(!skip_assigned)
					{
						skip = i
						skip_assigned = true
					}
					test_run = false
					out.println("BUSY:Launch one new instance to share the load")
					busy_found(i,skip,ips_to_check,dd,r,log,log_name)
						
						
				}
					
				else if(status == "OVERLOADED" && !ovrldd_done)
				{	
					ovrldd_found = true
					if(!skip_assigned)
					{
						skip = i
						skip_assigned = true
					}
					test_run = false
					out.println("OVERLOADED:Launch two new instance to share the load and stablize")
						overloaded_found(i,skip,ips_to_check,dd,r,log,log_name)
						
				}
				
				
			}
		}
		//out.println("file is$(read_file(log_name_ml))")
	
	
	}
	
	/**
	*this function is activated if a container is found overloaded if that happens it checks to see if any other replica containers exists to this parent container if child containers do not exist it powers all replica/child containers up
	*
	*
	*inputs:
	*int i the index at which the main loop that scans the machines is
	*int skip the index or the machine that is the parent so if is skipped from the power down process
	*String ips_to_check[] the array that contains names of the machines running conatiners
	*char dd[] the status of the machine that is currently bein scanned
	*HTTPResponse r the response from that machine
	*char log[] name of array where the where the result of the response is to be stored
	*char log_name[] name of file to be requested from remote machine that contains its details
	*
	*result:
	*powers up all child/replica container  
	*/
	
	void overloaded_found(int i, int skip, String ips_to_check[],char dd[],HTTPResponse r,char log[],char log_name[])
	{
		
		for(int x=0;x<ips_to_check.arrayLength;x++)
		{
			out.println("in overloaded x is : $(intUtl.intToString(x)) an skip is: $(intUtl.intToString(skip))")
								
			r = rq.get("http://$(ips_to_check[x].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
			dd = r.content
								
			r = rq.get("http://$(ips_to_check[x].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/	
								
			log = r.content
								
			if (!(dd.arrayLength > 0) && x!=skip)
			{
				out.println("OVERLOADED CHECK: Container Active On: $(ips_to_check[x].string)")
			
			}
			else
			{
				char avg_ttr_w_srvc[] = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
						
				char min_avg_ttr_w_srvc[] = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string

				char status[] = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc),false)
									
				char f_st[] = status 
									
				if((!free_found || !busy_found) && x!=skip)
				{
					out.println("Overloaded Active x is: $(intUtl.intToString(x)) and i is : $(intUtl.intToString(i)) an skip is: $(intUtl.intToString(skip))")
					
					r = rq.get("http://$(ips_to_check[x].string):2018/up", null)/*"http://127.0.0.1:5100"*/	
					
					log = r.content
					
					out.println(log)
					//activated_busy = true
					
				}
								
				
			}
		}
		//ovrldd_done = true
		ovrldd_found = false
		test_run = true
		skip_assigned = false
		
	}

	/**
	*this function is activated if a container is found busy if that happens it checks to see if any other replica containers exists to this parent container if child containers do not exist it powers up one child container
	*
	*
	*inputs:
	*int i the index at which the main loop that scans the machines is
	*int skip the index or the machine that is the parent so if is skipped from the power down process
	*String ips_to_check[] the array that contains names of the machines running conatiners
	*char dd[] the status of the machine that is currently bein scanned
	*HTTPResponse r the response from that machine
	*char log[] name of array where the where the result of the response is to be stored
	*char log_name[] name of file to be requested from remote machine that contains its details
	*
	*result:
	*powers up one child container to share the load  
	*/
	
	void busy_found(int i, int skip, String ips_to_check[],char dd[],HTTPResponse r,char log[],char log_name[])
	{
		bool activated_busy = false
		for(int x=0;x<ips_to_check.arrayLength;x++)
		{
			out.println("in busy x is : $(intUtl.intToString(x)) an skip is: $(intUtl.intToString(skip))")
								
			r = rq.get("http://$(ips_to_check[x].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
			dd = r.content
								
			r = rq.get("http://$(ips_to_check[x].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/	
								
			log = r.content
								
			if (!(dd.arrayLength > 0) && x!=skip)
			{
				out.println("BUSY CHECK: Container Active On: $(ips_to_check[x].string)")
			
			}
			else
			{
				char avg_ttr_w_srvc[] = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
						
				char min_avg_ttr_w_srvc[] = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string

				char status[] = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc),false)
									
				char f_st[] = status 
									
				if((!free_found || !ovrldd_found) && x!=skip && !activated_busy)
				{
					out.println("BUSY Active x is: $(intUtl.intToString(x)) and i is : $(intUtl.intToString(i)) an skip is: $(intUtl.intToString(skip))")
					
					r = rq.get("http://$(ips_to_check[x].string):2018/up", null)/*"http://127.0.0.1:5100"*/	
					
					log = r.content
					
					out.println(log)
					activated_busy = true
					busy_found = false
				}
								
				
			}
		}
		//busy_done = true
		test_run = true
		skip_assigned = false

	}
	
	/**
	*this function is activated if a container is found free if that happens it checks to see if any other replica containers exists to this parent container if child containers do exist it powers them down
	*
	*
	*inputs:
	*int i the index at which the main loop that scans the machines is
	*int skip the index or the machine that is the parent so if is skipped from the power down process
	*String ips_to_check[] the array that contains names of the machines running conatiners
	*char dd[] the status of the machine that is currently bein scanned
	*HTTPResponse r the response from that machine
	*char log[] name of array where the where the result of the response is to be stored
	*char log_name[] name of file to be requested from remote machine that contains its details
	*
	*result:
	*powers down all but one container  
	*/
	
	void free_found(int i, int skip, String ips_to_check[],char dd[],HTTPResponse r,char log[],char log_name[])
	{
		
		for(int x=0;x<ips_to_check.arrayLength;x++)
		{
								
			r = rq.get("http://$(ips_to_check[x].string):2018/down_res.txt", null)/*"http://127.0.0.1:5100"*/
								dd = r.content
								
			r = rq.get("http://$(ips_to_check[x].string):2018/WT_$log_name", null)/*"http://127.0.0.1:5100"*/	
								
			log = r.content
								
			if (dd.arrayLength > 0 && x!=skip)
			{
				out.println("FREE CHECK: Container Not Active On: $(ips_to_check[x].string)")
			
			}
			else
			{
				char avg_ttr_w_srvc[] = stringUtil.explode(stringUtil.explode(log, "\n\r")[3].string,":")[1].string
						
				char min_avg_ttr_w_srvc[] = stringUtil.explode(stringUtil.explode(log, "\n\r")[4].string,":")[1].string

				char status[] = get_stat(intUtl.intFromString(avg_ttr_w_srvc),intUtl.intFromString(min_avg_ttr_w_srvc),false)
									
				char f_st[] = status 
									
				if(f_st == "FREE" && f_st != "BUSY" && f_st != "OVERLOADED" && (!busy_found || !ovrldd_found) && x!=skip)
				{
					out.println("FREE Active x is: $(intUtl.intToString(x)) and i is : $(intUtl.intToString(i)) an skip is: $(intUtl.intToString(skip))")
					r = rq.get("http://$(ips_to_check[x].string):2018/down", null)/*"http://127.0.0.1:5100"*/	
					log = r.content
					out.println(log)
				}
								
				
			}
		}
		//free_done = true
		free_found = false
		test_run = true
		skip_assigned = false

	}
	
	/**
	*this functions uses the mapping formulae distance calclation formulae sqrt((x2-x1)2 + (y2-y1)2) and the calculated ttr limits to map the min average ttr and average ttr values to a status either free, busy or overloaded
	*
	*inputs:
	*int avg average reply time found
	*int min_avg minimum average reply time found
	*bool add boolean value that specifies if the generated status record is to be added to the regression calculations
	*
	*result:
	*a file with the trained values stored in it stored in the same directory as the cntrlr.dn file  
	*/
	
	
	char[] get_stat(int avg, int min_avg,bool add){
				
		dec free_avg_calc = 0.0
		dec busy_avg_calc = 0.0
		dec overloaded_avg_calc = 0.0
		dec x = 0.0
		dec y = 0.0
		char f_nme[] = "reg_stats.txt"
		char stat[] = "unknown"
		//distance calclation formulae sqrt(x2-x1)2 + (y2-y1)2
		
		x = decUtil.decFromString("$(intUtl.intToString(free_trained_avg)).0") - decUtil.decFromString("$(intUtl.intToString(avg)).0")
		
		y = decUtil.decFromString("$(intUtl.intToString(free_trained_min_avg)).0") - decUtil.decFromString("$(intUtl.intToString(min_avg)).0")
		
		free_avg_calc = maths.power((x), 2.00) + maths.power((y), 2.00)
		free_avg_calc = maths.sqrt(free_avg_calc)
		
		x = decUtil.decFromString("$(intUtl.intToString(busy_trained_avg)).0") - decUtil.decFromString("$(intUtl.intToString(avg)).0")
		
		y = decUtil.decFromString("$(intUtl.intToString(busy_trained_min_avg)).0") - decUtil.decFromString("$(intUtl.intToString(min_avg)).0")
		
		busy_avg_calc = maths.power((x), 2.00) + maths.power((y), 2.00)
		busy_avg_calc = maths.sqrt(busy_avg_calc)
		
		x = decUtil.decFromString("$(intUtl.intToString(overloaded_trained_avg)).0") - decUtil.decFromString("$(intUtl.intToString(avg)).0")
		
		y = decUtil.decFromString("$(intUtl.intToString(overloaded_trained_min_avg)).0") - decUtil.decFromString("$(intUtl.intToString(min_avg)).0")
		
		overloaded_avg_calc = maths.power((x), 2.00) + maths.power((y), 2.00)
		overloaded_avg_calc = maths.sqrt(overloaded_avg_calc)
		
		if(busy_avg_calc >= free_avg_calc && free_avg_calc <= overloaded_avg_calc)
		{
			stat = "FREE"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(0))
			}
		}
		else if(busy_avg_calc <= overloaded_avg_calc && free_avg_calc >= busy_avg_calc)
		{
			stat = "BUSY"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(1))
			}
		}
		else if(busy_avg_calc >= overloaded_avg_calc && free_avg_calc >= overloaded_avg_calc)
		{
			stat = "OVERLOADED"
			if(add)
			{
				write_to_file(f_nme,intUtl.intToString(2))
			}
		}
		
		
		
		
		//regression check starts here
		
		char st_c[] = read_file(f_nme)
		
		String sts[] =stringUtil.explode(st_c,"\n\r")
		out.println("arraysize:$(intUtl.intToString(sts.arrayLength))")
		
		if(sts.arrayLength >= 15)
		{
			do_regression(sts,f_nme)
		}
		
		
		return stat
	
	}
						
	
	/**
	*this functions does regresssion, to get a streamlined data set this function reduces the min average and average free,busy and overload values if free is found more often and increases these values if busy or overloaded is found often, it uses a 15 integer array to achive this 
	*
	*inputs:
	*String sts[] array that records last status
	*char f_nme[] file where the array is stored
	*
	*result:
	*change in average ttr and min ttr free,busy and overloaded limits   
	*/
	
	
	void do_regression(String sts[],char f_nme[])
	{//regression code starts here
		
		int fail_state= 9999
		int moderate_load = 5999
		dec st_free = 0.0
		dec st_busy = 0.0
		dec st_ovrld = 0.0
		dec stat_free = 0.0
		dec stat_busy = 0.0
		dec stat_ovrld = 0.0
		
		for(int i = 0;i < sts.arrayLength;i++)
				{
				//	out.println("index:$(intUtl.intToString(i))")
				//	out.println(sts[i].string)
				
					if(sts[i].string=="0")
					{
						st_free = st_free+1
					}
					else if(sts[i].string=="1")
					{
						st_busy = st_busy+1
					}
					else if(sts[i].string=="2")
					{
						st_ovrld = st_ovrld+1
					}
				}
				
				stat_free = st_free/sts.arrayLength
				stat_busy = st_busy/sts.arrayLength
				stat_ovrld = st_ovrld/sts.arrayLength
				
				//out.println("$(decUtil.decToString(st_free))==>$(decUtil.decToString(stat_free)),$(decUtil.decToString(st_busy))==>$(decUtil.decToString(stat_busy)),$(decUtil.decToString(st_ovrld))==>$(decUtil.decToString(stat_ovrld))")
				
				RunStatus s = run.execute("DEL $f_nme")
				
				if(stat_free >= 0.6)
				{	
					dec ml_dec = (0.1*moderate_load_adjusted) + moderate_load_adjusted
					dec fl_dec = (0.1*fail_state_adjusted)  + fail_state_adjusted
					int ml_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_dec),".")[0].string)
					int fl_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_dec),".")[0].string)
					
					
					//out.println("ml_adjust:$(intUtl.intToString(ml_adjust))")
					//out.println("fl_adjust:$(intUtl.intToString(fl_adjust))")
					
					if(ml_adjust<=moderate_load)
					{
						moderate_load_adjusted = ml_adjust
					}
					else
					{
						moderate_load_adjusted = moderate_load
					}
					if(fl_adjust<=fail_state)
					{
						fail_state_adjusted = fl_adjust
					}
					else
					{
						fail_state_adjusted = fail_state
					}
					out.println("Free found greater than or equals to 60% of the time with value:$(decUtil.decToString(stat_free))")
					
				}
				else if(stat_busy >= 0.6)
				{
					
					
					dec ml_dec = 0.9*moderate_load_adjusted
					dec fl_dec = 0.9*fail_state_adjusted
					int ml_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_dec),".")[0].string)
					int fl_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_dec),".")[0].string)
					
					
					dec ml_half = moderate_load/2
					dec fl_half = fail_state/2
					
					int ml_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_half),".")[0].string)
					
					int fl_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_half),".")[0].string)
					
					//out.println("ml_adjust:$(intUtl.intToString(ml_adjust))")
					//out.println("fl_adjust:$(intUtl.intToString(fl_adjust))")
				
					if(ml_adjust>=(moderate_load/2))
					{
						moderate_load_adjusted = ml_adjust
					}
					else
					{
						moderate_load_adjusted = ml_half_set
					}
					if(fl_adjust>=(fail_state/2))
					{
						fail_state_adjusted = fl_adjust
					}
					else
					{
						fail_state_adjusted = fl_half_set
					}
					
					out.println("Busy found greater than or equals to 60% of the time with value:$(decUtil.decToString(stat_busy))")
				}
				else if(stat_ovrld >= 0.6)
				{
					
					dec ml_dec = 0.8*moderate_load_adjusted
					dec fl_dec = 0.8*fail_state_adjusted
					int ml_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_dec),".")[0].string)
					int fl_adjust = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_dec),".")[0].string)
					
					
					dec ml_half = moderate_load/2
					dec fl_half = fail_state/2
					
					int ml_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(ml_half),".")[0].string)
					
					int fl_half_set = intUtl.intFromString(stringUtil.explode(decUtil.decToString(fl_half),".")[0].string)
					
					//out.println("ml_adjust:$(intUtl.intToString(ml_adjust))")
					//out.println("fl_adjust:$(intUtl.intToString(fl_adjust))")
					
					if(ml_adjust>=(moderate_load/2))
					{
						moderate_load_adjusted = ml_adjust
					}
					else
					{
						moderate_load_adjusted = ml_half_set
					}
					if(fl_adjust>=(fail_state/2))
					{
						fail_state_adjusted = fl_adjust
					}
					else
					{
						fail_state_adjusted = fl_half_set
					}
					
					
					out.println("Overloaded found greater than or equals to 60% of the time with value:$(decUtil.decToString(stat_ovrld))")
				}
		out.println("Moderate load new:$(intUtl.intToString(moderate_load_adjusted))")
		out.println("fails state new:$(intUtl.intToString(fail_state_adjusted))")
	
	}
	
	
	/**
	*this function generates the csv log used in knn training
	*
	*
	*inputs:
	*
	*result:
	*generated log file in the same directory as the cntrlr.o file  
	*/
	
	void run_csv_gen()
	{
	
		char ml_log_csv[] = "ml_log_csv.csv"
		char log_name_ml[] ="ml_log.txt"
		char d[]
		String tmp[]
		char avg_ttr[]
		char min_avg_ttr[]
		char stat[]
		
		RunStatus s = run.execute("if exist $ml_log_csv break> $ml_log_csv")
		
		d = read_file(log_name_ml)
		tmp = stringUtil.explode(d,">")
		write_to_file(ml_log_csv,"AVG_TTR,MIN_AVG_TTR,Status,")
		for(int i = 0; i < tmp.arrayLength ; i++){
		
			avg_ttr = stringUtil.explode(stringUtil.explode(stringUtil.explode(tmp[i].string,":")[4].string,"\n\r")[0].string," ")[0].string
			min_avg_ttr = stringUtil.explode(stringUtil.explode(stringUtil.explode(tmp[i].string,":")[5].string,"\n\r")[0].string," ")[0].string
			stat = stringUtil.explode(stringUtil.explode(stringUtil.explode(tmp[i].string,":")[7].string,"\n\r")[0].string," ")[0].string
			
			//out.println("file is:\n $(tmp[i].string)$avg_ttr,$min_avg_ttr,$stat")
			out.print("-")
			write_to_file(ml_log_csv,"$avg_ttr,$min_avg_ttr,$stat,")
		
		}
		s = run.execute("$ml_log_csv")
	
	}
	
	/**
	*this function checks if the k nearest neighbours training values have already been generated if so then it extracts those values and sets them on the container for status generatios, if not it does the training and assigns the values 
	*
	*Further to this it keeps checking the training data size and if the size is a multiple of 1000 then it does training again to fine tune the values more up until it reaches 10000 records at which point it clears the training data and adopts the 10000 trained values ntil data grows to a multiple of 1000 again
	*
	*inputs:
	*
	*result:
	*assigned status generation values  
	*/
	
	
	void do_knn_calculations()
	{
	
		
		char f_name[] = "knn_trained_vals"
		char fl_data[] = read_file("ml_log_csv.csv")
		String ext_data[] = stringUtil.explode(fl_data,"\n\r")
		if (fileSystem.exists(f_name))
		{
			if((ext_data.arrayLength%1000) == 0 && ext_data.arrayLength <=10000)
			{
				run_csv_gen()
				do_knn_training()
			}
			else if(ext_data.arrayLength >=10000)
			{
				RunStatus s = run.execute("ren ml_log_csv.csv ml_log_csv_old.csv")
				s = run.execute("ren ml_log.txt ml_log_old.txt")
				
				out.println("\n---TRAINING ALREADY DONE---")
				String flss[] = stringUtil.explode(read_file("knn_trained_vals"),"\n\r")
				free_trained_avg = intUtl.intFromString(stringUtil.explode(flss[0].string,",")[0].string)
				free_trained_min_avg = intUtl.intFromString(stringUtil.explode(flss[1].string,",")[0].string)
				
				busy_trained_avg = intUtl.intFromString(stringUtil.explode(flss[0].string,",")[1].string)
				busy_trained_min_avg = intUtl.intFromString(stringUtil.explode(flss[1].string,",")[1].string)
				
				overloaded_trained_avg = intUtl.intFromString(stringUtil.explode(flss[0].string,",")[2].string)
				overloaded_trained_min_avg = intUtl.intFromString(stringUtil.explode(flss[1].string,",")[2].string)
			}
			else
			{
				out.println("\n---TRAINING ALREADY DONE---")
				String fls[] = stringUtil.explode(read_file("knn_trained_vals"),"\n\r")
				free_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[0].string)
				free_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[0].string)
				
				busy_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[1].string)
				busy_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[1].string)
				
				overloaded_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[2].string)
				overloaded_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[2].string)
			}
			
		}
		else if (!(fileSystem.exists("ml_log_csv.csv")))
		{
			run_csv_gen()
			do_knn_training()
		}
		else
		{
			do_knn_training()
		}
		
		out.println("")
		out.println("AVG_TTR Trained values")
		out.println("FOR FREE:$(intUtl.intToString(free_trained_avg))")
		out.println("FOR BUSY:$(intUtl.intToString(busy_trained_avg))")
		out.println("FOR OVERLOADED:$(intUtl.intToString(overloaded_trained_avg))")
		out.println("\nMIN_AVG_TTR Trained values")
		out.println("FOR FREE:$(intUtl.intToString(free_trained_min_avg))")
		out.println("FOR BUSY:$(intUtl.intToString(busy_trained_min_avg))")
		out.println("FOR OVERLOADED:$(intUtl.intToString(overloaded_trained_min_avg))")
		
		
	}
	
	/**
	*this functions does machine learning, it does the k nearst neighbours training using alog file thats generated by the controller, this log file contains details of the average reply times and the status against it. the generated averages from here are stored in a file if that file
	*
	*inputs:
	*
	*result:
	*a file with the trained values stored in it stored in the same directory as the cntrlr.dn file  
	*/
	
	
	void do_knn_training()
	{
	
		//avg_ttr_k_nearest_values
		dec free_trained_avg_temp = 0
		dec busy_trained_avg_temp = 0
		dec overloaded_trained_avg_temp = 0 
	
		//min_avg_ttr_k_nearest_values
		dec free_trained_min_avg_temp = 0
		dec busy_trained_min_avg_temp = 0
		dec overloaded_trained_min_avg_temp = 0
		
		//avg counters
	
		dec free_count = 0
		dec busy_count = 0
		dec overloaded_count = 0

		
		
		char fl_data[] = read_file("ml_log_csv.csv")
		String ext_data[] = stringUtil.explode(fl_data,"\n\r")
		out.println("---KNN_TRAINING RUNNING---\n\n")
		
		//extract the reply times for the given status
		for(int i = 0; i< ext_data.arrayLength;i++)
		{
			if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="FREE")
			{
				free_trained_avg_temp = free_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				free_trained_min_avg_temp = free_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string) 
				free_count = free_count + 1
			}
			else if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="BUSY")
			{
				
				busy_trained_avg_temp = busy_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				busy_trained_min_avg_temp = busy_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string)
				
				busy_count = busy_count + 1
			}
			else if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="OVERLOADED")
			{
				overloaded_trained_avg_temp = overloaded_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				overloaded_trained_min_avg_temp = overloaded_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string)	
				overloaded_count = overloaded_count + 1
				
			}
			
			out.print("-")
		}
		
		free_trained_avg_temp = free_trained_avg_temp / free_count
		free_trained_min_avg_temp = free_trained_min_avg_temp / free_count
		busy_trained_avg_temp = busy_trained_avg_temp / busy_count
		busy_trained_min_avg_temp = busy_trained_min_avg_temp / busy_count
		overloaded_trained_avg_temp = overloaded_trained_avg_temp / overloaded_count
		overloaded_trained_min_avg_temp = overloaded_trained_min_avg_temp / overloaded_count
		
		//to convert the decimal values to string and round them off
		free_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_avg_temp),".")[0].string)
		
		//to convert the decimal values to string and round them off
		free_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_min_avg_temp),".")[0].string)
		
		//to convert the decimal values to string and round them off
		busy_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_avg_temp),".")[0].string)
		
		//to convert the decimal values to string and round them off
		busy_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_min_avg_temp),".")[0].string)
		
		//to convert the decimal values to string and round them off
		overloaded_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_avg_temp),".")[0].string)
		
		//to convert the decimal values to string and round them off
		overloaded_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_min_avg_temp),".")[0].string)
		
		//to convert the decimal values to string and round them off
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_avg_temp),".")[1].string[0])>=5)
		{
			free_trained_avg = free_trained_avg + 1
		}
		//to convert the decimal values to string and round them off
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			free_trained_min_avg = free_trained_min_avg + 1
		}
		//to convert the decimal values to string and round them off
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_avg_temp),".")[1].string[0])>=5)
		{
			busy_trained_avg = busy_trained_avg + 1
		}
		//to convert the decimal values to string and round them off
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			busy_trained_min_avg = busy_trained_min_avg + 1
		}
		
		//to convert the decimal values to string and round them off
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_avg_temp),".")[1].string[0])>=5)
		{
			overloaded_trained_avg = overloaded_trained_avg + 1
		}
		
		//to convert the decimal values to string and round them off
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			overloaded_trained_min_avg = overloaded_trained_min_avg + 1
		}
	
	
		char avg_vals[]="$(intUtl.intToString(free_trained_avg)),$(intUtl.intToString(busy_trained_avg)),$(intUtl.intToString(overloaded_trained_avg)),"
		
		char min_avg_vals[]="$(intUtl.intToString(free_trained_min_avg)),$(intUtl.intToString(busy_trained_min_avg)),$(intUtl.intToString(overloaded_trained_min_avg)),"
			
		write_to_file("knn_trained_vals",avg_vals)
		write_to_file("knn_trained_vals",min_avg_vals)
	}

	/**
	*this functions write to a file in the same directory as the web.dn file
	*
	*inputs:
	*char f_n[] name of file to write to
	*char d[] data to be written onto the file
	*
	*result:
	*specified file with the given data in the same directory as the web.dn file  
	*/
	
	void write_to_file(char f_n[],char d[])
	{	
		File f = new File(f_n, File.FILE_ACCESS_WRITE)
		f.setPos(f.getSize())
		f.write("$d\n")
		f.close()
	}
	
	/**
	*this functions reads from a file in the same directory as the web.dn file
	*
	*inputs:
	*char f_n[] name of file to read from
	*
	*result:
	*char array with the contents of the file in it  
	*/
	
	
	char[] read_file(char f_name[])
	{
		if (fileSystem.exists(f_name))
		{
			File f = new File(f_name, File.FILE_ACCESS_READ)
			char q[] = f.read(f.getSize())
			f.close()
			return q
		}
		return null
		
	}
	
	
}