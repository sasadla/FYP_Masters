uses time.DateTime
uses ws.forms.FileFormField
component provides App requires io.Output out,io.FileSystem fileSystem, data.StringUtil stringUtil,data.IntUtil intUtl,io.File, os.Run run,net.http.HTTPRequest rq, data.DecUtil decUtil  {
 
 
	//avg_ttr_k_nearest_values
	int free_trained_avg = 0
	int busy_trained_avg = 0
	int overloaded_trained_avg = 0 
	
	//min_avg_ttr_k_nearest_values
	int free_trained_min_avg = 0
	int busy_trained_min_avg = 0
	int overloaded_trained_min_avg = 0
	
		
	int App:main(AppParam params[])
	{	
		do_knn_calculations()

		return 0
	}
	
	
	void do_knn_calculations()
	{
		//intUtl.intFromString(stringUtil.explode(stringUtil.explode(log,"\n\r")[5].string,":")[1].string)
		
		char f_name[] = "knn_trained_vals"
		
		if (fileSystem.exists(f_name))
		{
			out.println("Training already done")
			String fls[] = stringUtil.explode(read_file("knn_trained_vals"),"\n\r")
			free_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[0].string)
			free_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[0].string)
			
			busy_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[1].string)
			busy_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[1].string)
			
			overloaded_trained_avg = intUtl.intFromString(stringUtil.explode(fls[0].string,",")[2].string)
			overloaded_trained_min_avg = intUtl.intFromString(stringUtil.explode(fls[1].string,",")[2].string)
			
		}
		else
		{
			do_knn_training()
		}
		
		out.println("")
		out.println("AVG_TTR Trained values")
		out.println("FOR FREE:$(intUtl.intToString(free_trained_avg))")
		out.println("FOR BUSY:$(intUtl.intToString(busy_trained_avg))")
		out.println("FOR OVERLOADED:$(intUtl.intToString(overloaded_trained_avg))")
		out.println("\nMIN_AVG_TTR Trained values")
		out.println("FOR FREE:$(intUtl.intToString(free_trained_min_avg))")
		out.println("FOR BUSY:$(intUtl.intToString(busy_trained_min_avg))")
		out.println("FOR OVERLOADED:$(intUtl.intToString(overloaded_trained_min_avg))")
		
		out.println("\n\n... Ready For world domination :-P ...")
		
	//	char fl[] = read_file("knn_trained_vals") 
	//	out.println("\n\nfile is:\n $(fl)")
	
	}
	
	void do_knn_training()
	{
	
	//avg_ttr_k_nearest_values
		dec free_trained_avg_temp = 0
		dec busy_trained_avg_temp = 0
		dec overloaded_trained_avg_temp = 0 
	
		//min_avg_ttr_k_nearest_values
		dec free_trained_min_avg_temp = 0
		dec busy_trained_min_avg_temp = 0
		dec overloaded_trained_min_avg_temp = 0
		
		//avg counters
	
		dec free_count = 0
		dec busy_count = 0
		dec overloaded_count = 0

		
		
		char fl_data[] = read_file("ml_log_csv.csv")
		String ext_data[] = stringUtil.explode(fl_data,"\n\r")
		out.println("... IM Training Myself :-P ...\n\n")
		for(int i = 0; i< ext_data.arrayLength;i++)
		{
			if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="FREE")
			{
				free_trained_avg_temp = free_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				free_trained_min_avg_temp = free_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string) 
				free_count = free_count + 1
			}
			else if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="BUSY")
			{
				
				busy_trained_avg_temp = busy_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				busy_trained_min_avg_temp = busy_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string)
				
				busy_count = busy_count + 1

				
				
				
			}
			else if(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[2].string =="OVERLOADED")
			{
				
				
				overloaded_trained_avg_temp = overloaded_trained_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[0].string)
				overloaded_trained_min_avg_temp = overloaded_trained_min_avg_temp + intUtl.intFromString(stringUtil.explode(stringUtil.explode(fl_data,"\n\r")[i].string,",")[1].string)
				
				overloaded_count = overloaded_count + 1

				
			}
			
			out.print("-")
		}
		
		free_trained_avg_temp = free_trained_avg_temp / free_count
		free_trained_min_avg_temp = free_trained_min_avg_temp / free_count
		busy_trained_avg_temp = busy_trained_avg_temp / busy_count
		busy_trained_min_avg_temp = busy_trained_min_avg_temp / busy_count
		overloaded_trained_avg_temp = overloaded_trained_avg_temp / overloaded_count
		overloaded_trained_min_avg_temp = overloaded_trained_min_avg_temp / overloaded_count
		
		
		
		free_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_avg_temp),".")[0].string)
		free_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_min_avg_temp),".")[0].string)
		
		busy_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_avg_temp),".")[0].string)
		busy_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_min_avg_temp),".")[0].string)
		
		overloaded_trained_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_avg_temp),".")[0].string)
		overloaded_trained_min_avg = intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_min_avg_temp),".")[0].string)
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_avg_temp),".")[1].string[0])>=5)
		{
			free_trained_avg = free_trained_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(free_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			free_trained_min_avg = free_trained_min_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_avg_temp),".")[1].string[0])>=5)
		{
			busy_trained_avg = busy_trained_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(busy_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			busy_trained_min_avg = busy_trained_min_avg + 1
		}
		
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_avg_temp),".")[1].string[0])>=5)
		{
			overloaded_trained_avg = overloaded_trained_avg + 1
		}
		
		if(intUtl.intFromString(stringUtil.explode(decUtil.decToString(overloaded_trained_min_avg_temp),".")[1].string[0])>=5)
		{
			overloaded_trained_min_avg = overloaded_trained_min_avg + 1
		}
	
	
		char avg_vals[]="$(intUtl.intToString(free_trained_avg)),$(intUtl.intToString(busy_trained_avg)),$(intUtl.intToString(overloaded_trained_avg)),"
		char min_avg_vals[]="$(intUtl.intToString(free_trained_min_avg)),$(intUtl.intToString(busy_trained_avg)),$(intUtl.intToString(overloaded_trained_avg)),"
		
		out.println("")
		out.println("")
		out.println(avg_vals)
		out.println("")
		out.println(min_avg_vals)
		out.println("")
		out.println("")
		
		write_to_file("knn_trained_vals",avg_vals)
		write_to_file("knn_trained_vals",min_avg_vals)
	}
	
	
	
	void write_to_file(char f_n[],char d[])
	{	
		File f = new File(f_n, File.FILE_ACCESS_WRITE)
		f.setPos(f.getSize())
		f.write("$d\n")
		f.close()
	}
	
	char[] read_file(char f_name[])
	{
		if (fileSystem.exists(f_name))
		{
			File f = new File(f_name, File.FILE_ACCESS_READ)
			char q[] = f.read(f.getSize())
			f.close()
			return q
		}
		return null
		
	}
	
	
}