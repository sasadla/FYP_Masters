uses time.DateTime
//this component makes requestes to the given webservice, it take as input the name of the service to make requests to and the numbers of threads to use to make requests with

//it is ultimately used in tthe project to make the services busy or overloaded to test the controllers response to the changing enviornment

component provides App requires io.Output out, data.StringUtil stringUtil, net.http.HTTPRequest rq, data.IntUtil intUtl,time.DateUtil dtTm,io.File, os.Run run,time.Calendar caln, data.json.JSONParser jparser  {
 
 /**
 * this is the main function its params arrays index 0 has the number of threads to use and index 1 has the service name that is to be overloaded
 */
	
	int App:main(AppParam params[])
	{	
		
		
		int tCount=intUtl.intFromString(params[0].string)
		
		
		start_test(tCount,params[1].string)
		
		
		return 0
	}
	
	/**
	*this function runs the test on the container and genrates logs that are later used to generate min reply time and average reply time
	*
	*inputs:
	*int tcount the load to put on the conatiner while testing i.e 1 = 1000ms delay in reply time
	*char p[] the path of where the logs should be temporarily kept
	*
	*result:
	*an int with the average reply time for the container 
	*/
 
	void start_test(int tcount,char machine[])
	{
	
		int req_num = 10
		int cnt = 1
		int threadCount = tcount
		//int urls_to_check = threadCount
		Thread myThreads[] = new Thread[threadCount]
		String urls[] = stringUtil.explode(read_file("tst_urls.txt"), "\n\r")//only put 5 links in this file otherwise system will crash
		
		out.println("\nStarting Requester service on web service with $(intUtl.intToString(threadCount)) threads\nMaking Requests now")
		for (int i = 0; i < threadCount; i++)
		{	
			char url[]
			if (i < urls.arrayLength)
			{
				url = "http://$(machine):5000/$(urls[i].string)"
			}
			else
			{
				url = "http://$(machine):5000/$(urls[3].string)"
			}
			//out.println(url)
			myThreads[i] = asynch::rqst(url, i, req_num)
			
		}
		
		for (int i = 0; i < threadCount; i++)
		{
			myThreads[i].join()
			
		}
		out.println("\nRequester Service Complete results are:")
		
		for (int i = 0; i < threadCount; i++)
		{
		
			char log_name[] = "requester_log_$(intUtl.intToString(i)).txt"
			out.println(read_file(log_name))
			RunStatus s = run.execute("DEL D:\\MSCI\\Fyp_masters\\Fyp_code\\FYP_Masters\\Docker_dana_server\\$log_name")
		}
		
		
	
	}
	
	/**
	*this functions is used by the average time collection threads to make a given number of requests to the webservice and returns back the average time for those requests
	*
	*inputs:
	*char urls[] urls to make the requests to
	*int cnt thread number to use to assign the log file a unique name
	*int reqno number of requests to be made by the file
	*char p[] path where the log files generated are to be stored
	*
	*result:
	*specified file with the given data in the same directory as the web.dn file  
	*/
	
	
	void rqst(char url[],int cnt, int reqno)
	{
		char log_name[] = "requester_log_$(intUtl.intToString(cnt)).txt"
		RunStatus s = run.execute("if exist $log_name break> $log_name")
		write_to_file(log_name,"This log is for URL :$url")
		for (int i = 0; i < reqno; i++)
		{
			HTTPResponse r = rq.get(url, null)/*"http://127.0.0.1:5100"*/
			
		
			//char resp[] =r.content
			out.print("-")
			
			write_to_file(log_name,"Request number: $(intUtl.intToString(i+1)) made to: $url")
		}
		
		
		//out.println("res is: $resp")
		
	}
	
	/**
	*this functions write to a file in the same directory as the web.dn file
	*
	*inputs:
	*char f_n[] name of file to write to
	*char d[] data to be written onto the file
	*
	*result:
	*specified file with the given data in the same directory as the web.dn file  
	*/
	
	void write_to_file(char f_n[],char d[])
	{	
		File f = new File(f_n, File.FILE_ACCESS_WRITE)
		f.setPos(f.getSize())
		f.write("$d\n")
		f.close()
	}
	
	/**
	*this functions reads from a file in the same directory as the web.dn file
	*
	*inputs:
	*char f_n[] name of file to read from
	*
	*result:
	*char array with the contents of the file in it  
	*/
	
	char[] read_file(char f_name[])
	{
		File f = new File(f_name, File.FILE_ACCESS_READ)
		char q[] = f.read(f.getSize())
		f.close()
		return q
		
	}
	
}