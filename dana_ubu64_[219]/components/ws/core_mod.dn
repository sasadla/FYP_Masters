/*
This is a very simple web framework. Run ws.core in your web app directory.

URLs for your website are mapped as follows:

Anything on SWC_PATH is directly served as static web content.

For any other URL (such as /my/resource) the URL is treated as a dotted file path and we search for a file with a corresponding name (starting at my.resource.o). If no such file exists, the URL is shortened by one level and we search for a file at this level (i.e., at my.o), continuing this search until we default to "/web.o".

When the located web component is invoked, we pass into its "path" parameter any part of the URL that was removed. Using the example URL "/my/resource", if we locate the file "my.o" we pass in the path "resource"; if we default to "/web.o" the path is "my/resource".

Invocations on web components are serialised, so no concurrency control is necessary to gain mutual exclusion.
*/

uses Web

const char SWC_PATH[] = "/swc/"
const int LISTEN_PORT = 2000

data Command {
	const int GET = 1
	const int POST = 2
	const int PUT = 3
	const int DELETE = 4
	int type
	
	char resource[]
	Header headers[]
	}

data PathMapping {
	char path[]
	char file[]
	}

component provides App requires io.Output out, net.TCPServerSocket, net.TCPSocket, data.StringUtil stringUtil, data.IntUtil intUtil, io.FileSystem fileSystem, io.File, ws.DocStream, composition.RecursiveLoader loader, net.http.HTTPRequest requester,os.Run run {
	
	char web_root[] = "./"
	
	Command readCommand(TCPSocket socket)
		{
		Command cmd = new Command()
		
		Header headers[]
		
		char buf[]
		char last4[] = new char[4]
		
		while (last4 != "\r\n\r\n")
			{
			char b[] = socket.recv(1)
			buf = new char[](buf, b)
			last4[0] = last4[1]
			last4[1] = last4[2]
			last4[2] = last4[3]
			last4[3] = b[0]
			}
		
		String lines[] = stringUtil.explode(buf, "\r\n")
		
		String cmd_parts[] = stringUtil.explode(lines[0].string, " ")
		
		if (stringUtil.lowercase(cmd_parts[0].string) == "get")
			cmd.type = Command.GET
			else if (stringUtil.lowercase(cmd_parts[0].string) == "post")
			cmd.type = Command.POST
		
		cmd.resource = cmd_parts[1].string
		
		for (int i = 1; i < lines.arrayLength; i++)
			{
			int ndx = stringUtil.find(lines[i].string, ":") + 1
			char key[] = stringUtil.subString(lines[i].string, 0, ndx - 1)
			char value[] = stringUtil.trim(stringUtil.subString(lines[i].string, ndx, lines[i].string.arrayLength - ndx))
			
			headers = new Header[](headers, new Header(stringUtil.lowercase(key), value))
			}
		
		cmd.headers = headers
		
		return cmd
		}
	
	char[] getHeaderValue(Command cmd, char key[])
		{
		key = stringUtil.lowercase(key)
		
		for (int i = 0; i < cmd.headers.arrayLength; i++)
			{
			if (stringUtil.lowercase(cmd.headers[i].key) == key)
				{
				return cmd.headers[i].value
				}
			}
		
		return null
		}
	
	char[] getHandler(String resource)
		{
		//parse command into /'s and find the most detailed file, if any, by converting to each "/" to ".", and adding ".o"
		char command[] = resource.string
		char path[]
		
		resource.string = ""
		
		if (command[command.arrayLength-1] == "/" && command != "/")
			{
			command = stringUtil.subString(command, 0, command.arrayLength - 1)
			path = new char[](web_root, stringUtil.implode(stringUtil.explode(command, "/"), "."), ".o")
			}
			else if (command == "/")
			{
			path = new char[](web_root, "web.o")
			}
			else
			{
			path = new char[](web_root, stringUtil.implode(stringUtil.explode(command, "/"), "."), ".o")
			}
		
		if (fileSystem.exists(path))
			return path
		
		while (stringUtil.find(command, "/") != StringUtil.NOT_FOUND)
			{
			int offset = stringUtil.rfind(command, "/")
			if (resource.string != null)
				resource.string = new char[](stringUtil.subString(command, offset, command.arrayLength - offset), resource.string)
				else
				resource.string = stringUtil.subString(command, offset, command.arrayLength - offset)
			
			command = stringUtil.subString(command, 0, stringUtil.rfind(command, "/"))
			
			path = new char[](web_root, stringUtil.implode(stringUtil.explode(command, "/"), "."), ".o")
			
			if (fileSystem.exists(path))
				return path
			}
		
		path = new char[](web_root, "web.o")
		
		if (fileSystem.exists("web.o"))
			return path
		
		return null
		}
	
	bool serveFunction_GET(DocStream ds, char path[], char command[])
		{
		IDC com = loader.load(path).mainComponent
		
		Web rh = new Web() from com :< Web
		
		return rh.get(command, ds)
		}
	
	bool serveFunction_POST(DocStream ds, char path[], char command[], char ctype[], byte payload[])
		{
		IDC com = loader.load(path).mainComponent
		
		Web rh = new Web() from com :< Web
		
		return rh.post(command, ctype, payload, ds)
		}
	
	bool serveFile(char command[], TCPSocket s)
		{
		char path[] = new char[](web_root, command)
		
		if (fileSystem.exists(path))
			{
			File fd = new File(path, File.FILE_ACCESS_READ)
			
			byte dat[] = fd.read(fd.getSize())
			
			s.send("HTTP/1.1 200 OK\r\n")
			s.send("Server: Dana Web Engine\r\n")
			s.send("Connection: close\r\n")
			s.send("Content-length: $(intUtil.intToString(fd.getSize()))\r\n")
			s.send("\r\n")
			
			fd.close()
			
			s.send(dat)
			
			return true
			}
		
		return false
		}
		
		bool sendFile(char command[], TCPSocket s,char cntrlr_path[],DocStream ds)
		{
		char c[] =stringUtil.explode(command,"/")[0].string
		char path[]
		bool dat_set = false
		
		if(c == "ml_log")
		{
			path = "$c.txt"
		}
		else if(c == "ml_log_csv")
		{
			run_csv_gen()
			path = "$c.csv"
		}
		else if (c == "ml_log_size")
		{
			RunStatus st = run.execute("./clear_file.bash ml_log_size")
			run_csv_gen()
			path = "ml_log_csv.csv"
			char temp[] = read_file(path)
			String ss[] = stringUtil.explode(temp, "\n\r")
			temp = intUtil.intToString(ss.arrayLength)
			//out.println("temp:$temp")
			write_to_file("ml_log_size",temp)
			path = "ml_log_size"
		}
			
		
		
		if (fileSystem.exists(path) && !dat_set)
			{
			File fd = new File(path, File.FILE_ACCESS_READ)
			
			byte dat[] = fd.read(fd.getSize())
			
			s.send("HTTP/1.1 200 OK\r\n")
			s.send("Server: Dana Web Engine\r\n")
			s.send("Connection: close\r\n")
			s.send("Content-length: $(intUtil.intToString(fd.getSize()))\r\n")
			s.send("\r\n")
			
			fd.close()
			
			
			s.send(dat)
			
			return true
			}
			
		
		return false
		}
	
	bool staticFile(char command[])
		{
		if (command.arrayLength >= SWC_PATH.arrayLength && stringUtil.subString(command, 0, SWC_PATH.arrayLength) == SWC_PATH)
			{
			return true
			}
		
		return false
		}
	
	void processStream(TCPSocket s)
		{
		//parse headers, extract command
		
		//call function associated with command, return result (as HTTP response)
		
		Command cmd = readCommand(s)
		
		if (cmd == null)
			{
			//malformed / interrupted request
			s.disconnect()
			throw new Exception("malformed or interrupted request")
			}
		
		//cmd.resources is the path from the request
		//cmd.header is the header of the request
		
		//TODO: write response to client
		
		char controller_ip[] = "localhost"
		char log_name[] = "free_ips.txt"
		char failed_at[]
		char m[]
		char cnt_pth[] = "/home/lancs/sadla/FYP_Masters/Docker_dana_server/controller"
		DocStream ds = null
		if(fileSystem.exists(cnt_pth/$log_name))
		{
			ds = new DocStream(s, cmd.headers,false)
			bool success = false
			
			char f_ip[] = stringUtil.explode(read_file("$(cnt_pth)/$log_name"),"\n\r")[0].string
			//out.println(f_ip)
			
			HTTPResponse r = requester.get("http://$f_ip:5000/$(cmd.resource)", null)/*"http://127.0.0.1:5100"*/
			
			
			out.println(cmd.resource)
			if(cmd.resource == "/ml_log" || cmd.resource == "/ml_log_csv" || cmd.resource == "/ml_log_size")
			{
				sendFile(cmd.resource,s,cnt_pth,ds)
			}
			else 
			{
				if (r == null)
				{
					success = false
					failed_at = "Unable to send request to webservice from frontend\n"
				}
				else 
				{
					success = true
					m =r.content
					//out.println(m)
				
				}
			}
			
			if (staticFile(cmd.resource))
			{
				success = false
				success = serveFile(cmd.resource, s)
			}
			else
			{
				failed_at = "Unable to serve resource from webservice on frontend\n Or Unable to send request from frontend to webservice\n"
			}
			
			if (!success)
			{
				ds.write("Webservice offline: $failed_at")
				
			}
			else
			{
				ds.write(m)
			}
			
			
			
			
			/*
			String resource = new String(cmd.resource)
			char handler[]
			
			bool success = false
			
			if (staticFile(cmd.resource))
				{
				success = serveFile(cmd.resource, s)
				}
				else if ((handler = getHandler(resource)) != null)
				{
				DocStream ds = new DocStream(s, cmd.headers)
				
				if (cmd.type == Command.GET)
					{
					success = serveFunction_GET(ds, handler, resource.string)
					}
					else if (cmd.type == Command.POST)
					{
					//read the payload first
					char ctype[] = getHeaderValue(cmd, "content-type")
					int plen = intUtil.intFromString(getHeaderValue(cmd, "content-length"))
					byte payload[] = s.recv(plen)
					
					success = serveFunction_POST(ds, handler, resource.string, ctype, payload)
					}
				
				if (success) ds.endStream()
				}
			
			*/
			if (!success)
				{
				ds.write("Webservice offline: $failed_at")
				
				}
			
					}
		else
		{
			ds.write("Controller path is wrong")
		}
		ds.endStream()
		s.disconnect()

	}
		
	char[] read_file(char f_name[])
	{
		File f = new File(f_name, File.FILE_ACCESS_READ)
		char q[] = f.read(f.getSize())
		f.close()
		return q
		
	}
		
		
	void run_csv_gen()
	{
	
		char ml_log_csv[] = "ml_log_csv.csv"
		char cnt_pth[] = "/home/lancs/sadla/FYP_Masters/Docker_dana_server/controller"
		char log_name_ml[] ="$cnt_pth/ml_log.txt"
		char d[]
		String tmp[]
		char avg_ttr[]
		char min_avg_ttr[]
		char stat[]
		
		RunStatus s = run.execute("./clear_file.bash $ml_log_csv")
		
		d = read_file(log_name_ml)
		tmp = stringUtil.explode(d,">")
		write_to_file(ml_log_csv,"AVG_TTR,MIN_AVG_TTR,Status,")
		for(int i = 0; i < tmp.arrayLength ; i++){
		
			avg_ttr = stringUtil.explode(stringUtil.explode(stringUtil.explode(tmp[i].string,":")[4].string,"\n\r")[0].string," ")[0].string
			min_avg_ttr = stringUtil.explode(stringUtil.explode(stringUtil.explode(tmp[i].string,":")[5].string,"\n\r")[0].string," ")[0].string
			stat = stringUtil.explode(stringUtil.explode(stringUtil.explode(tmp[i].string,":")[7].string,"\n\r")[0].string," ")[0].string
			
			//out.println("file is:\n $(tmp[i].string)$avg_ttr,$min_avg_ttr,$stat")
			//out.print("-")
			write_to_file(ml_log_csv,"$avg_ttr,$min_avg_ttr,$stat,")
		
		}
		//s = run.execute("$ml_log_csv")
	
	}

	void write_to_file(char f_n[],char d[])
	{	
		File f = new File(f_n, File.FILE_ACCESS_WRITE)
		f.setPos(f.getSize())
		f.write("$d\n")
		f.close()
	}
		
	
	int App:main(AppParam params[])
		{
		TCPServerSocket s = new TCPServerSocket()
		
		if (!s.bind(TCPServerSocket.ANY_ADDRESS, LISTEN_PORT))
			throw new Exception("Failed to bind master socket")
		
		while (true)
			{
			TCPSocket cs = new TCPSocket()
			
			if (cs.accept(s))
				{
				//processStream(cs)
				asynch::processStream(cs)
				}
			}
		
		return 0
		}
	
	}