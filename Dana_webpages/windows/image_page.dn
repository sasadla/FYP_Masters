uses ws.forms.FileFormField

component provides ws.Web requires io.Output out, io.FileSystem fileSystem, ws.FormParser fparser {

	bool Web:get(char path[], DocStream s)
		{	
			s.write("<!DOCTYPE html>")	
			s.write("<html>")
				s.write("<head>")
					s.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">")// to avoid ERR_INVALID_CHUNKED_ENCODING in google chrome response status and content lenght needs to be updated as so
					s.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">")//to make website run on mobile devices
					s.write("<meta charset=\"utf-8\"/>")
					s.write("<title>Image Based Test Page</title>")
					s.write("<link href=\"swc/css/main.css\" rel=\"stylesheet\" type=\"text/css\">")
				s.write("</head>")
				s.write("<body>")	
					s.write("<div class = \"pagebox\">")
						s.write("<a href=\"index\">Home</a>")
						s.write("<a href=\"text_page\">Text Page</a>")
						s.write("<a href=\"image_text_page\">Text and Image page</a>")

						s.write("<h1>This is the Image based Webage</h1>")

						s.write("<h2>Distributed Computing</h2>")
				
						s.write("<img src=\"swc/images/ds.png\"></img>")
				
						s.write("<img src=\"swc/images/ds2.jpeg\"></img>")
				
						s.write("<img src=\"swc/images/ds3.jpg\"></img>")
				
						s.write("<img src=\"swc/images/ds4.jpg\"></img>")
				
						s.write("<br/>")
						s.write("<br/>")
				
						s.write("<h2>Cloud Computing</h2>")
				
						s.write("<img src=\"swc/images/cloud.png\"></img>")
				
						s.write("<img src=\"swc/images/cloud2.jpg\"></img>")
				
						s.write("<img src=\"swc/images/cloud3.jpg\"></img>")
				
						s.write("<img src=\"swc/images/cloud4.jpg\"></img>")
				
						s.write("<br/>")
						s.write("<br/>")
				
					s.write("<div/>")

				s.write("</body>")

			s.write("</html>")

			
		return true
		}

	bool Web:post(char path[], char contentType[], byte content[], DocStream stream)
		{
		
		
		return true
		}

	}
